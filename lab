using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace Universidade
{
    class Aluno
    {
        public char Status;
        public short Matricula, Periodo, Dia, Mes;
        public int Ano;
        public long Telefone;
        public string Nome, Curso, Endereço;

        public Aluno()
        {
            Status = ' ';
            Matricula = 0;
            Curso = "";
            Periodo = 0;
            Nome = "";
            Rua = "";
            Bairro = "";
            Cidade = "";
            Estado = "";
            Dia = 0;
            Mes = 0;
            Ano = 0;
            Telefone = 0;
        }

        public void Salvar(BinaryWriter BW)
        {
            BW.Write(Status);
            BW.Write(Matricula);
            BW.Write(Curso);
            BW.Write(Periodo);
            BW.Write(Nome);
            BW.Write(Rua);
            BW.Write(Bairro);
            BW.Write(Cidade);
            BW.Write(Estado);
            BW.Write(Dia);
            BW.Write(Mes);
            BW.Write(Ano);
            BW.Write(Telefone);
        }

        public void Ler(BinaryReader BR)
        {
            Status = BR.ReadChar();
            Matricula = BR.ReadInt16();
            Curso = BR.ReadString();
            Periodo = BR.ReadInt16();
            Nome = BR.ReadString();
            Endereço = BR.ReadString();
            Dia = BR.ReadInt16();
            Mes = BR.ReadInt16();
            Ano = BR.ReadInt32();
            Telefone = BR.ReadInt64();
        }
        
    }
    class Program
    {
        static string NomeArq = "Aluno.dat";
        static string NomeABP = "AlunoPesquisa.dat";
        static FileStream Arquivo;
        static BinaryWriter Escreve_Arquivo;
        static BinaryReader Ler_Arquivo;
        // ABP
        static FileStream ArquivoABP;
        static BinaryWriter WriteAlunoABP;
        static BinaryReader ReadAlunoABP;

        static void Inicializar()
        {
            Arquivo = new FileStream(NomeArq, FileMode.OpenOrCreate, FileAccess.ReadWrite);            
            Escreve_Arquivo = new BinaryWriter(Arquivo);
            Ler_Arquivo = new BinaryReader(Arquivo);

            ArquivoABP = new FileStream(NomeABP, FileMode.OpenOrCreate, FileAccess.ReadWrite);
            WriteAlunoABP = new BinaryWriter(ArquivoABP);
            ReadAlunoABP = new BinaryReader(ArquivoABP);
        }

        static void Finalizar()
        {
            Escreve_Arquivo.Close();
            Ler_Arquivo.Close();
            Arquivo.Close();
        }
        static void Main(string[] args)
        {
            Inicializar();
            Menu();
            Finalizar();
        }
        static void Menu()
        {
            byte opcao;
            do
            {
                Console.Clear();
                Console.WriteLine("CADASTRO DE ALUNOS");
                Console.WriteLine("========================\n");
                Console.WriteLine("1 - Cadastrar Aluno");
                Console.WriteLine("2 - Excluir Aluno");
                Console.WriteLine("3 - Consultar Aluno por Nome");
                Console.WriteLine("4 - Consultar Aluno por Matricula");
                Console.WriteLine("5 - Relatório de alunos da universidade");
                Console.WriteLine("6 - Relatório de alunos por curso");
                Console.WriteLine("7 - Relatório de alunos por curso de SI");
                Console.WriteLine("8 - Sair\n");
                Console.Write("Digite sua opção : ");
                opcao = byte.Parse(Console.ReadLine());

                switch (opcao)
                {
                    case 1:
                        Cadastrar_Aluno();
                        break;
                    case 2:
                        Excluir_Aluno();
                        break;
                    case 3:
                        Consultar_Aluno_Nome();
                        break;
                    case 4:
                        Consultar_Aluno_Matricula();
                        break;
                    case 5:
                        Relatório_Universidade();
                        break;
                    case 6:
                        Relatório_Curso();
                        break;
                    case 7:
                        Relatório_Curso_SI();
                        break;
                    case 8:
                        break;
                    default:
                        Console.WriteLine("Opção inválida.");
                        break;
                }
            } while (opcao >= 1 && opcao <= 7);
            Console.ReadKey();
        }
        static public void Cadastrar_Aluno()
        {
            Arquivo.Seek(Arquivo.Length, SeekOrigin.Begin);
            Aluno Al = new Aluno();

            Console.Clear();
            Console.Write("Matrícula.: ");
            Al.Matricula = short.Parse(Console.ReadLine());
            Console.Write("Curso.....: ");
            Al.Curso = Console.ReadLine();
            Console.Write("Período...: ");
            Al.Periodo = short.Parse(Console.ReadLine());
            Console.Write("Nome......: ");
            Al.Nome = Console.ReadLine();
            Console.Write("Rua....: ");
            Al.Rua = Console.ReadLine();
            Console.Write("Bairro.....: ");
            Al.Bairro = Console.ReadLine();
            Console.Write("Estado...: R$ ");
            Al.Estado = Console.Parse(Console.ReadLine());
            Console.Write("Dia.....: ");
            Al.Dia = short.Parse(Console.ReadLine());
            Console.Write("Mes.....: ");
            Al.Mes = short.Parse(Console.ReadLine());
            Console.Write("Ano.....: ");
            Al.Ano = int.Parse(Console.ReadLine());
            Console.Write("Telefone...: ");
            Al.Telefone = long.Parse(Console.ReadLine());
            Al.Salvar(Escreve_Arquivo);
        }
        static void Excluir_Aluno()
        {

        }
        static void Consultar_Aluno_Nome()
        {

        }
        static void Consultar_Aluno_Matricula()
        {

        }
        static void Relatório_Universidade()
        {

        }
        static void Relatório_Curso()
        {

        }
        static void Relatório_Curso_SI()
        {

        }
        static void GerarIndices()
        {
            SortedDictionary<short, long> dicMatricula = new SortedDictionary<short, long>();
            SortedDictionary<string, long> dicNome = new SortedDictionary<string, long>();
            BinaryWriter idxMat = new BinaryWriter(new FileStream("FuncMat.idx", FileMode.Create, FileAccess.Write));
            BinaryWriter idxNome = new BinaryWriter(new FileStream("FuncNome.idx", FileMode.Create, FileAccess.Write));
            Arquivo.Seek(0, SeekOrigin.Begin);
            Aluno Al = new Aluno();
            long ultimaPos = 0;
            while (Ler_Arquivo.PeekChar() >= 0)
            {
                ultimaPos = Arquivo.Position;
                Al.Ler(Ler_Arquivo);
                if (Al.Status != '*')
                {
                    dicMatricula.Add(Al.Matricula, ultimaPos);
                    dicNome.Add(Al.Nome, ultimaPos);
                }
            }

            foreach (KeyValuePair<short, long> kvp in dicMatricula)
            {
                idxMat.Write(kvp.Key);
                idxMat.Write(kvp.Value);
            }

            foreach (KeyValuePair<string, long> kvp in dicNome)
            {
                idxNome.Write(kvp.Key);
                idxNome.Write(kvp.Value);
            }
            idxMat.Close();
            idxNome.Close();
        }

    }
}
